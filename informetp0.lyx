#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language spanish-mexico
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Informe de Trabajo Practico Nº 0
\end_layout

\begin_layout Standard
\align center
Facultad de Ingeniera - UBA
\end_layout

\begin_layout Standard
\align center
Autor: Martín Stancanelli
\end_layout

\begin_layout Standard
\align center
Padrón: 95188
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Objetivo
\end_layout

\begin_layout Standard
El objetivo del trabajo practico es familiarizarse con la herramienta SERCOM
 provista por la cátedra para la corrección automática de trabajos prácticos
 y ejecución de pruebas.
 
\end_layout

\begin_layout Standard
Además se busca que los alumnos tomen un contacto temprano con el entorno
 de trabajo que se va a utilizar a lo largo de la materia (Linux, gcc, C,
 etc...).
\end_layout

\begin_layout Section*
Configuración del entorno
\end_layout

\begin_layout Standard
El entorno de trabajo elegido para la realización del trabajo practico fue
 una PC con SO Linux Mint 17.3 y compilador gcc 4.8 configurado para utilizar
 el estándar de C99.
 
\end_layout

\begin_layout Section*
Desarrollo de pasos
\end_layout

\begin_layout Subsection*
Paso 1
\end_layout

\begin_layout Standard
Para el primer paso se desarrollo en el entorno indicado en la sección anterior
 un pequeño programa hola mundo para testear que el entorno este correctamente
 configurado.
\end_layout

\begin_layout Standard
Luego se instalo el programa 
\emph on
Valgrind 
\emph default
y se probo la ejecución de nuestro hola mundo.
\end_layout

\begin_layout Standard
En la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ejecucion-de-hello"

\end_inset

 podemos ver la corrida del hola mundo y en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ejecucion-de-hello-valgrind"

\end_inset

 podemos ver la corrida con 
\emph on
Valgrind
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/common_exec.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Ejecución de hello world
\begin_inset CommandInset label
LatexCommand label
name "fig:Ejecucion-de-hello"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename screenshots/valgrind_exec.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Ejecución de hello world con Valgrind
\begin_inset CommandInset label
LatexCommand label
name "fig:Ejecucion-de-hello-valgrind"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
¿Qué representa sizeof()? ¿Cuál sería el valor de salida de sizeof(char)
 y sizeof(int)?
\end_layout

\begin_layout Standard
sizeof() es una función que devuelve la representación en bytes de un tipo
 de dato.
 La representación depende de la arquitectura y la implementación, sin embargo
 C y C++ determinan un mínimo de bits para la representación de tipos, por
 ejemplo para char son 8bits y para int son 16bits.
 
\end_layout

\begin_layout Standard
Entones la salida de sizeof(char) es 1, y la salida de sizeof(int) es 4,
 representados ambos en bytes.
 
\end_layout

\begin_layout Itemize
“El sizeof() de una struct de C es igual a la suma del sizeof() de cada
 uno de los elementos de la misma”.
 Explique la validez o invalidez de dicha afirmación.
\end_layout

\begin_layout Standard
El valor del sizeof de un struct no es la suma de los sizeof de sus elementos,
 ya que el compilador agrega padding por una cuestión de performance.
 Así por ejemplo el sizeof de un struct cuyas componentes son 1 char y 1
 int nos dio 8 y la suma de los sizeof de las partes 5 en el siguiente ejemplo
 .
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,basicstyle={\small},tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines,basicstyle={\ttfamily},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status collapsed

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main (int argc, const char * argv[]) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	struct Books {
\end_layout

\begin_layout Plain Layout

		int id;
\end_layout

\begin_layout Plain Layout

		char authorInitial;
\end_layout

\begin_layout Plain Layout

	};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	int sizeInt = sizeof(int);
\end_layout

\begin_layout Plain Layout

	int sizeChar = sizeof(char);
\end_layout

\begin_layout Plain Layout

	struct Books book1;
\end_layout

\begin_layout Plain Layout

	book1.id = 25;
\end_layout

\begin_layout Plain Layout

	book1.authorInitial = 'A';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	printf("%s", "Sum of the sizeofs: ");
\end_layout

\begin_layout Plain Layout

	int sumOfSizeOfs = sizeof(book1.id) + sizeof(book1.authorInitial);
\end_layout

\begin_layout Plain Layout

	printf("%d
\backslash
n", sumOfSizeOfs);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	printf("%s", "Sum of the struct: ");
\end_layout

\begin_layout Plain Layout

	printf("%d
\backslash
n", sizeof( book1 ) );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Paso 2
\end_layout

\begin_layout Standard
Para este segundo paso se entrego el código provisto por el enunciado.
 Tal como predecía el enunciado las pruebas fallaron ya que el SERCOM no
 pudo generar la aplicación, como podemos ver en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Salida-error-SERCOM"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/stderr.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Salida error SERCOM
\begin_inset CommandInset label
LatexCommand label
name "fig:Salida-error-SERCOM"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los errores generados son errores del linker, ya que estamos haciendo llamadas
 a función no incluidas previamente con una directiva #include
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines,stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main( int argc, char *argv[] )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  char nombre[20];
\end_layout

\begin_layout Plain Layout

  char *buffer;
\end_layout

\begin_layout Plain Layout

  FILE *fp;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  ztrcpy( nombre, argv[1] );
\end_layout

\begin_layout Plain Layout

  fp = fopen( nombre, "r" );
\end_layout

\begin_layout Plain Layout

  if( fp == NULL ) return 2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  buffer = malloc( sizeof(int) ); /* buffer innecesario */
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  while( !feof(fp) )
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    int c = fgetc(fp);
\end_layout

\begin_layout Plain Layout

    if( c != EOF )
\end_layout

\begin_layout Plain Layout

      printf( "%c", (char) c );
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Código fuente paso 2
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Paso 3
\end_layout

\begin_layout Standard
Se corrigieron los errores de compilación incluyendo la librería stdlib.h
 y cambiando la llamada a ztrcpy por strcpy.
 A continuación se realizo una segunda entrega del código, la cual pudo
 ser compilada por el SERCOM pero fallo al validar las normas de codificación
 como podemos ver en las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Generacion-del-ejecutable"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Errores-normas-de"

\end_inset

.
\end_layout

\begin_layout Standard
Las normas de codificación fallaron ya que había espacios en blanco de mas
 entre los argumentos de las funciones y los paréntesis.
 Además la salida nos sugiere el uso de la función snprintf en vez de strcpy,
 la cual es casi siempre peor.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/error paso 3.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Generación del ejecutable y error normas de codificación
\begin_inset CommandInset label
LatexCommand label
name "fig:Generacion-del-ejecutable"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/stderr_normas_paso3.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Errores normas de codificación
\begin_inset CommandInset label
LatexCommand label
name "fig:Errores-normas-de"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Además del error ya mencionado también fallo la prueba 1, ya que esta esperaba
 que el programa retorne un 1 al no encontrar el archivo pasado como parámetro
 y retorno un 2.
 Los códigos de retorno habituales para un programa son un 0 en caso de
 salida exitosa o un 1 en caso de algún error, aunque en casos especiales
 se pueden utilizar códigos de error distintos para indicar distintos tipos
 de errores.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/fallo prueba 1 paso 3.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Falla prueba 1
\begin_inset CommandInset label
LatexCommand label
name "fig:Falla-prueba-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines,stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main( int argc, char *argv[] )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  char nombre[20];
\end_layout

\begin_layout Plain Layout

  char *buffer;
\end_layout

\begin_layout Plain Layout

  FILE *fp;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  strcpy( nombre, argv[1] );
\end_layout

\begin_layout Plain Layout

  fp = fopen( nombre, "r" );
\end_layout

\begin_layout Plain Layout

  if( fp == NULL ) return 2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  buffer = malloc( sizeof(int) ); /* buffer innecesario */
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  while( !feof(fp) )
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    int c = fgetc(fp);
\end_layout

\begin_layout Plain Layout

    if( c != EOF )
\end_layout

\begin_layout Plain Layout

      printf( "%c", (char) c );
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Código fuente paso 3
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Paso 4
\end_layout

\begin_layout Standard
En este paso se corrigieron los errores de codificación que fueron marcados
 por el SERCOM en el paso anterior, se reemplazaron los números mágicos
 por constantes declaradas con la directiva #define y se corrigió el código
 de error incorrecto que hacia fallarla prueba 1.
\end_layout

\begin_layout Standard
Se volvió a realizar una entrega del código, observando ahora que la prueba
 1 pasaba exitosamente (figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Salida-corecta-de"

\end_inset

) y el chequeo de las normas de codificación solo mostraba un warning sugiriendo
 el uso de la función snprintf (figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Prueba-1-correcta"

\end_inset

).
\end_layout

\begin_layout Standard
Sin embargo la prueba 2 fallo, ya que la corrida de Valgrind sobre el código
 detectaba errores (ver figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Salida-Valgrind"

\end_inset

).
 
\end_layout

\begin_layout Standard
Los fallos en Valgrind se deben a la apertura de archivos que luego no fueron
 cerrados y a la llamada a un malloc que no esta seguida de un free en algún
 momento.
 Los archivos que no se cierran no pueden garantizar que todo lo que se
 mando a escribir a ellos sea realmente escrito, ya que puede haber quedado
 en algún buffer y además quedan marcados como en uso.
 El malloc que no se libera con free es memoria que se pierde ya que queda
 reservada pero nunca mas es usada.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/paso 4 normas codif solo warning.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Salida correcta de normas de codificación
\begin_inset CommandInset label
LatexCommand label
name "fig:Salida-corecta-de"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/prueba 1 paso 4 exit.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prueba 1 correcta
\begin_inset CommandInset label
LatexCommand label
name "fig:Prueba-1-correcta"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true"
inline false
status open

\begin_layout Plain Layout
==00:00:00:00.000 6129== Memcheck, a memory error detector
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6129== Copyright (C) 2002-2009, and GNU GPL'd, by Julian
 Seward et al.
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6129== Using Valgrind-3.6.0.SVN-Debian and LibVEX; rerun with
 -h for copyright info
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6129== Command: ./tp archivo-corto.txt
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6129== Parent PID: 6128
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6129== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== FILE DESCRIPTORS: 3 open at exit.
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== Open file descriptor 2: archivo-corto.txt
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129==    at 0x48E1B1E: __open_nocancel (syscall-template.S:82)
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129==    by 0x488BBC7: _IO_file_fopen@@GLIBC_2.1 (fileops.c:336)
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129==    by 0x487FDEC: __fopen_internal (iofopen.c:93)
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129==    by 0x487FE4B: fopen@@GLIBC_2.1 (iofopen.c:107)
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129==    by 0x8048603: main (main.c:22)
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== Open file descriptor 1: /var/lib/sercom/sercom/var/tmp/p
rueba.228754.stdout
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129==    <inherited from parent>
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== Open file descriptor 0: /home/sercom_backend/test/valgri
nd.out
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129==    <inherited from parent>
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== HEAP SUMMARY:
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129==     in use at exit: 356 bytes in 2 blocks
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129==   total heap usage: 2 allocs, 0 frees, 356 bytes
 allocated
\end_layout

\begin_layout Plain Layout
==00:00:00:00.371 6129== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129== 4 bytes in 1 blocks are definitely lost in loss
 record 1 of 2
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129==    at 0x47EBF20: malloc (vg_replace_malloc.c:236)
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129==    by 0x804861A: main (main.c:24)
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129== LEAK SUMMARY:
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129==    definitely lost: 4 bytes in 1 blocks
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129==    indirectly lost: 0 bytes in 0 blocks
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129==      possibly lost: 0 bytes in 0 blocks
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129==    still reachable: 352 bytes in 1 blocks
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129==         suppressed: 0 bytes in 0 blocks
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129== Reachable blocks (those to which a pointer was found)
 are not shown.
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129== To see them, rerun with: --leak-check=full --show-reacha
ble=yes
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129== For counts of detected and suppressed errors, rerun
 with: -v
\end_layout

\begin_layout Plain Layout
==00:00:00:00.372 6129== ERROR SUMMARY: 1 errors from 1 contexts (suppressed:
 15 from 8)
\end_layout

\begin_layout Plain Layout
[SERCOM] Summary
\end_layout

\begin_layout Plain Layout
[SERCOM] Command Line: /usr/bin/valgrind --tool=memcheck --trace-children=yes
 --track-fds=yes --time-stamp=yes --num-callers=20 --error-exitcode=42 --db-atta
ch=no --leak-check=full --leak-resolution=med --log-file=valgrind.out ./tp
 archivo-corto.txt
\end_layout

\begin_layout Plain Layout
[SERCOM] Error code configured for Valgrind: 42.
\end_layout

\begin_layout Plain Layout
[SERCOM] Valgrind execution result: 42.
\end_layout

\begin_layout Plain Layout
[SERCOM] Valgrind result: Failure.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Salida Valgrind paso 4
\begin_inset CommandInset label
LatexCommand label
name "fig:Salida-Valgrind-paso4"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines,stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LARGO_FILE 20
\end_layout

\begin_layout Plain Layout

#define POS_NOMBRE_ARCHIVO 1
\end_layout

\begin_layout Plain Layout

#define ARCHIVO_NO_ENCONTRADO 1
\end_layout

\begin_layout Plain Layout

#define SALIDA_NORMAL 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  char nombre[LARGO_FILE];
\end_layout

\begin_layout Plain Layout

  char *buffer;
\end_layout

\begin_layout Plain Layout

  FILE *fp;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  strcpy(nombre, argv[POS_NOMBRE_ARCHIVO]);
\end_layout

\begin_layout Plain Layout

  fp = fopen(nombre, "r");
\end_layout

\begin_layout Plain Layout

  if ( fp == NULL ) return ARCHIVO_NO_ENCONTRADO;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  buffer = malloc(sizeof(int)); /* buffer innecesario */
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  while ( !feof(fp) )
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    int c = fgetc(fp);
\end_layout

\begin_layout Plain Layout

    if ( c != EOF )
\end_layout

\begin_layout Plain Layout

      printf("%c", (char) c);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  return SALIDA_NORMAL;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Código paso 4
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Paso 5
\end_layout

\begin_layout Standard
Se agrego una llamada a free y una a fclose y se volvió a realizar una entrega.
 Esta vez las pruebas 1, 2 y 4 fueron correctas, pero la 3 arrojo un código
 de error extraño (134).
\end_layout

\begin_layout Standard
Según lo apreciado el programa estaría tratando de leer mas allá del espacio
 reservado de memoria.
 Al leer la salida de la ejecución de valgrind sobre el código actual pareciera
 que estamos tratando de leer de la dirección 0x0.
 Utilizando strncpy podría solucionarse el problema, ya que el tercer argumento
 de dicha función es hasta cuantos caracteres voy a leer, evitando así pasarme
 si la entrada es mas grande.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true"
inline false
status open

\begin_layout Plain Layout
==00:00:00:00.000 6224== Memcheck, a memory error detector
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6224== Copyright (C) 2002-2009, and GNU GPL'd, by Julian
 Seward et al.
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6224== Using Valgrind-3.6.0.SVN-Debian and LibVEX; rerun with
 -h for copyright info
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6224== Command: ./tp archivo-corto.txt
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6224== Parent PID: 6223
\end_layout

\begin_layout Plain Layout
==00:00:00:00.000 6224== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== FILE DESCRIPTORS: 2 open at exit.
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== Open file descriptor 1: /var/lib/sercom/sercom/var/tmp/p
rueba.228772.stdout
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224==    <inherited from parent>
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== Open file descriptor 0: /home/sercom_backend/test/valgri
nd.out
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224==    <inherited from parent>
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== HEAP SUMMARY:
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224==     in use at exit: 0 bytes in 0 blocks
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224==   total heap usage: 2 allocs, 2 frees, 356 bytes
 allocated
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== All heap blocks were freed -- no leaks are possible
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== 
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== For counts of detected and suppressed errors, rerun
 with: -v
\end_layout

\begin_layout Plain Layout
==00:00:00:00.378 6224== ERROR SUMMARY: 0 errors from 0 contexts (suppressed:
 15 from 8)
\end_layout

\begin_layout Plain Layout
[SERCOM] Summary
\end_layout

\begin_layout Plain Layout
[SERCOM] Command Line: /usr/bin/valgrind --tool=memcheck --trace-children=yes
 --track-fds=yes --time-stamp=yes --num-callers=20 --error-exitcode=42 --db-atta
ch=no --leak-check=full --leak-resolution=med --log-file=valgrind.out ./tp
 archivo-corto.txt
\end_layout

\begin_layout Plain Layout
[SERCOM] Error code configured for Valgrind: 42.
\end_layout

\begin_layout Plain Layout
[SERCOM] Valgrind execution result: 0.
\end_layout

\begin_layout Plain Layout
[SERCOM] Valgrind result: Success.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Salida Valgrind paso 5
\begin_inset CommandInset label
LatexCommand label
name "fig:Salida-Valgrind-paso5"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/salida valgrind paso 5 error.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Salida valgrind paso 5
\begin_inset CommandInset label
LatexCommand label
name "fig:Salida-valgrind-paso"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
A continuación de explican los errores mas comunes de accesos a memoria
\end_layout

\begin_layout Itemize
Segmentation fault: Se produce cuando un programa trata de acceder a una
 posición de memoria a la cual no tiene acceso, o en una forma no permitida.
 
\end_layout

\begin_layout Itemize
Buffer overflow: Se genera cuando se escribe en un buffer y el tamaño de
 lo que tratamos de escribir excede el tamaño del buffer, pisando la memora
 adyacente a este.
 
\end_layout

\begin_layout Standard
Para la prueba 2 se ingreso el archivo text corto y para la 4 el texto largo.
 El comando ejecutado para la prueba 3 fue ./tp soy-un-archivo-con-nombre-largo.tx
t
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
La estructura de estos cuentos (y de todos los relativos a Holmes) es 
\end_layout

\begin_layout Plain Layout
similar: Sherlock esta en su casa de Baker Street, muchas veces en compañía
 
\end_layout

\begin_layout Plain Layout
de su amigo, cuando de repente aparece un personaje que viene a plantearle
 
\end_layout

\begin_layout Plain Layout
un problema para el que necesita ayuda.
 Otras veces esta noticia llega a el 
\end_layout

\begin_layout Plain Layout
a traves del periodico.
 Los casos son resueltospor la logica y el 
\end_layout

\begin_layout Plain Layout
razonamiento del famoso detective.
 Son cuentos de misterio, donde interviene 
\end_layout

\begin_layout Plain Layout
la intriga y la aventura, unido al analisis psicologico de sus personajes.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Contenido archivo prueba 2
\begin_inset CommandInset label
LatexCommand label
name "fig:Contenido-archivo-prueba"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
Rene Geronimo Favaloro (La Plata, Argentina, 12 de julio de 1923 - Buenos
 
\end_layout

\begin_layout Plain Layout
Aires, Argentina, 29 de julio de 2000) fue un prestigioso médico cirujano
 
\end_layout

\begin_layout Plain Layout
toracico argentino, reconocido mundialmente por ser quien realizo el primer
 
\end_layout

\begin_layout Plain Layout
bypass cardiaco en el mundo.
 Estudio medicina en la Universidad de La Plata 
\end_layout

\begin_layout Plain Layout
y una vez recibido, previo paso por el Hospital Policlinico, se mudo a la
 
\end_layout

\begin_layout Plain Layout
localidad de Jacinto Arauz para reemplazar temporalmente al medico local,
 
\end_layout

\begin_layout Plain Layout
quien tenia problemas de salud.
 A su vez, leia bibliografia medica 
\end_layout

\begin_layout Plain Layout
actualizada y empezo a tener interes en la cirugia toracica.
 A fines de la 
\end_layout

\begin_layout Plain Layout
decada de 1960 empezo a estudiar una tecnica para utilizar la vena safena
 
\end_layout

\begin_layout Plain Layout
en la cirugia coronaria.
 A principios de la decada de 1970 fundo la 
\end_layout

\begin_layout Plain Layout
fundacion que lleva su nombre.
 Se desempeno en la Conadep, condujo 
\end_layout

\begin_layout Plain Layout
programas de television dedicados a la medicina y escribio libros.
 
\end_layout

\begin_layout Plain Layout
Durante la crisis del 2000, su fundacion tenia una gran deuda economica
 y 
\end_layout

\begin_layout Plain Layout
le solicito ayuda al gobierno sin recibir respuesta, lo que lo indujo a
 
\end_layout

\begin_layout Plain Layout
suicidarse.
 El 29 de julio de 2000, después de escribir una carta al 
\end_layout

\begin_layout Plain Layout
Presidente De la Rua criticando al sistema de salud, se quito la vida de
 un 
\end_layout

\begin_layout Plain Layout
disparo al corazon.
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Texto usado como entrada en prueba 4
\begin_inset CommandInset label
LatexCommand label
name "fig:Texto-usado-como"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines,stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LARGO_FILE 20
\end_layout

\begin_layout Plain Layout

#define POS_NOMBRE_ARCHIVO 1
\end_layout

\begin_layout Plain Layout

#define ARCHIVO_NO_ENCONTRADO 1
\end_layout

\begin_layout Plain Layout

#define SALIDA_NORMAL 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  char nombre[LARGO_FILE];
\end_layout

\begin_layout Plain Layout

  char *buffer;
\end_layout

\begin_layout Plain Layout

  FILE *fp;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  strcpy(nombre, argv[POS_NOMBRE_ARCHIVO]);
\end_layout

\begin_layout Plain Layout

  fp = fopen(nombre, "r");
\end_layout

\begin_layout Plain Layout

  if ( fp == NULL ) return ARCHIVO_NO_ENCONTRADO;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  buffer = malloc(sizeof(int)); /* buffer innecesario */
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  while ( !feof(fp) )
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    int c = fgetc(fp);
\end_layout

\begin_layout Plain Layout

    if ( c != EOF )
\end_layout

\begin_layout Plain Layout

      printf("%c", (char) c);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  fclose(fp);
\end_layout

\begin_layout Plain Layout

  free(buffer);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  return SALIDA_NORMAL;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Código paso 5
\begin_inset CommandInset label
LatexCommand label
name "fig:Codigo-paso-5"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Paso 6
\end_layout

\begin_layout Standard
Para corregir el problema reportado en el paso 5 se elimino el buffer innecesari
o y se puso directamente el argv1 en la llamada a fopen.
 
\end_layout

\begin_layout Standard
Seguido de la corrección se realizo una nueva entrega.
 En esta ocasión todas las pruebas a excepción de la ultima pasaron, ya
 que aun no esta implementada la funcionalidad de la salida estándar (figura
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Resultado-prueba-5"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/salida normas codif paso 6.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Salida normas verificación paso 6
\begin_inset CommandInset label
LatexCommand label
name "fig:Salida-normas-verificacion"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/salida prueba 5 paso 6.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Resultado prueba 5
\begin_inset CommandInset label
LatexCommand label
name "fig:Resultado-prueba-5"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines,stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LARGO_FILE 20
\end_layout

\begin_layout Plain Layout

#define POS_NOMBRE_ARCHIVO 1
\end_layout

\begin_layout Plain Layout

#define ARCHIVO_NO_ENCONTRADO 1
\end_layout

\begin_layout Plain Layout

#define SALIDA_NORMAL 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  char *buffer;
\end_layout

\begin_layout Plain Layout

  FILE *fp;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  fp = fopen(argv[POS_NOMBRE_ARCHIVO], "r");
\end_layout

\begin_layout Plain Layout

  if ( fp == NULL ) return ARCHIVO_NO_ENCONTRADO;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  buffer = malloc(sizeof(int)); /* buffer innecesario */
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  while ( !feof(fp) )
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    int c = fgetc(fp);
\end_layout

\begin_layout Plain Layout

    if ( c != EOF )
\end_layout

\begin_layout Plain Layout

      printf("%c", (char) c);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  fclose(fp);
\end_layout

\begin_layout Plain Layout

  free(buffer);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  return SALIDA_NORMAL;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Código fuente paso 6
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Paso 7
\end_layout

\begin_layout Standard
En este ultimo paso se agrego la funcionalidad de leer desde stdin.
 
\end_layout

\begin_layout Standard
Podemos apreciar que para redireccionar stdin y stdout se utilizan los caractere
s < y >.
\end_layout

\begin_layout Standard
El caracter > permite redireccionar la salida del programa hacia un archivo.
 El caracter < permite tomar como entrada desde stdin a un archivo indicado
 después de dicho caracter.
\end_layout

\begin_layout Standard
Para finalizar se realizo una entrega final del código, con la cual todas
 las pruebas fueron exitosas.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/paso 7 entrega aceptada.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Entrega exitosa
\begin_inset CommandInset label
LatexCommand label
name "fig:Entrega-exitosa"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/paso 7 pruebas exito.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Pruebas exitosas
\begin_inset CommandInset label
LatexCommand label
name "fig:Pruebas-exitosas"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/mira mama sin manos paso 7.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Ejecución prueba 5 sin teclado
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename screenshots/salida a salida paso 7.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Redireccionado stdout
\begin_inset CommandInset label
LatexCommand label
name "fig:Redireccionado-stdout"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines,stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LARGO_FILE 20
\end_layout

\begin_layout Plain Layout

#define POS_NOMBRE_ARCHIVO 1
\end_layout

\begin_layout Plain Layout

#define ARCHIVO_NO_ENCONTRADO 1
\end_layout

\begin_layout Plain Layout

#define SALIDA_NORMAL 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  char *buffer;
\end_layout

\begin_layout Plain Layout

  FILE *fp = stdin;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  if (argc > POS_NOMBRE_ARCHIVO) 
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    fp = fopen(argv[POS_NOMBRE_ARCHIVO], "r");
\end_layout

\begin_layout Plain Layout

    if ( fp == NULL ) return ARCHIVO_NO_ENCONTRADO;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  buffer = malloc(sizeof(int)); /* buffer innecesario */
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  while ( !feof(fp) )
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    int c = fgetc(fp);
\end_layout

\begin_layout Plain Layout

    if ( c != EOF )
\end_layout

\begin_layout Plain Layout

      printf("%c", (char) c);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if (argc > POS_NOMBRE_ARCHIVO) 
\end_layout

\begin_layout Plain Layout

    fclose(fp);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  free(buffer);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  return SALIDA_NORMAL;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Código fuente final
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se inlcuye un diagrama explicando como fluyen la salida y entrada de los
 programas a traves de los 3 file descriptors basicos de Unix.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename /home/mastanca/Desktop/stdfigs.png
	width 100text%
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama file descriptors Unix
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Conclusión
\end_layout

\begin_layout Standard
El trabajo practico sirvió para tomar conocimiento de los lineamientos que
 se van a seguir a la hora de la corrección de los trabajos prácticos durante
 la cursada de la materia.
\end_layout

\begin_layout Standard
Además tomamos un primer contacto con el sistema de corrección automática,
 lo cual es importante para tener un mejor dominio del mismo en futuras
 entregas.
\end_layout

\begin_layout Standard
El poder descargarse las pruebas que son ejecutadas por el sistema para
 poder correrlas en forma local es de gran ayuda para verificar que lo hecho
 en el trabajo practico este cumpliendo con las expectativas mínimas del
 sistema.
\end_layout

\begin_layout Subsection*
\begin_inset Newpage pagebreak
\end_inset


\begin_inset Newline linebreak
\end_inset

Salida entrega final
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset External
	template PDFPages
	filename salidaEntregaTp0.pdf

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
